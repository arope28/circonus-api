#!/usr/bin/env ruby
#
# Add an HTTP site check
#

require 'circonusutil'

host = nil
@cu = CirconusUtil.new() { |opts,options|
  options[:brokers] = []
  options[:hostname] = nil
  options[:url] = nil
  options[:timeout] = 10 # seconds
  options[:texttomatch] = nil
  options[:subcomponents] = []
  options[:tags] = ['application:http','source:manual']
  opts.banner = "Usage: #{File.basename($0)}\n"
  opts.on( '--tags TAGLIST',"Apply comma separated list of tags (default: application:http,source:manual)" ) { |t| options[:tags] += t.split(/,/) }
  opts.on( '--brokers BROKER',"Comma separated list of broker names to use" ) { |t| options[:brokers] = t.split(',') }
  opts.on( '--hostname HOSTNAME',"Hostname to add" ) { |t| options[:hostname] = t }
  opts.on( '--uniqueid STRING',"For checks with the same hostname, uniquely identify the check" ) { |t| options[:subcomponents] += [t] }
  opts.on( '--timeout TIMEOUT',"Host timeout" ) { |t| options[:timeout] = t.to_i }
  opts.on( '--match TEXTTOMATCH',"String to match against in the response" ) { |t| options[:texttomatch] = t }
  opts.on( '--contactgroups CONTACTGROUPS',"Comma separated list of contact groups to send alerts to" ) { |t| options[:contactgroups] = t }
  opts.on( '--url URL',"URL to test" ) { |t| options[:url] = t }
}
if @cu.options[:brokers].empty?
  puts "Missing brokers list"
  exit -1
end
if @cu.options[:hostname].empty?
  puts "Missing hostname"
  exit -1
end
if @cu.options[:url].empty?
  puts "Missing url"
  exit -1
end
if @cu.options[:contactgroups].empty?
  puts "Missing contact group(s)"
  exit -1
end
@cu.options[:tags].sort!.uniq!
@cu.options[:contactgroups] = @cu.options[:contactgroups].split(',').sort.uniq
@cu.options[:brokers].sort!.uniq!

def do_update_check_bundle(cu,data)
  search_check_bundle = @cu.circonus.list_check_bundle({'display_name' => data['display_name']})
  existing = false
  if search_check_bundle.any? # already exists...
    existing = true
    r = @cu.circonus.update_check_bundle(search_check_bundle.first['_cid'],data)
  else
    r = @cu.circonus.add_check_bundle(data)
  end
  if not r.nil? then
    pp r
    print "Success (#{existing ? 'updating' : 'adding'} #{data['display_name']})\n"
  end
end

brokers = {}
@cu.options[:brokers].each do |broker|
  circonus_brokers = @cu.circonus.list_broker({'_name'=>broker})
  brokers[broker] = circonus_brokers.map { |m| m['_cid'] }.first
end

bundle_stub = {
  "brokers"=>[ ],
  "display_name"=>nil,
  "period"=>60,
  "target"=>nil,
  "timeout"=>10,
  "type"=>"http",
  "tags"=>[],
  "metrics"=> [
    {"name"=>"body_match", "type"=>"text"},
    {"name"=>"bytes", "type"=>"numeric"},
    {"name"=>"code", "type"=>"text"},
    {"name"=>"duration", "type"=>"numeric"},
    {"name"=>"truncated", "type"=>"numeric"},
    {"name"=>"tt_connect", "type"=>"numeric"},
    {"name"=>"tt_firstbyte", "type"=>"numeric"}
  ],
  "config" => {
    "url"=>nil,
    "http_version"=>"1.1",
    "header_Host"=>nil,
    "read_limit"=>"1048576",
    "method"=>"GET",
    "code"=>"^200$",
    "redirects"=>"0"
  }
}

bundle = bundle_stub.clone
bundle['brokers'] = brokers.values.sort
bundle['target'] = @cu.options[:hostname]
bundle['tags'] = @cu.options[:tags]
bundle['display_name'] = ([@cu.options[:hostname],'http'] + @cu.options[:subcomponents]).join(' ')
bundle['config']['url'] = @cu.options[:url]
bundle['config']['body'] = @cu.options[:texttomatch] unless @cu.options[:texttomatch].nil?
bundle['config']['header_Host'] = @cu.options[:hostname]
search_bundles = @cu.circonus.search_check_bundle(bundle['display_name'],'display_name')
if search_bundles.any? # already exists...
  r = @cu.circonus.update_check_bundle(search_bundles.first['_cid'],bundle)
else
  r = @cu.circonus.add_check_bundle(bundle)
end
if not r.nil? then
  print "Success\n"
  #pp r
end
checkids = r["_checks"]

def mib_add_datapoint!(graph,metric_name,datapoint={})
  init_datapoint = {
    'color'=>nil,
    "axis"=>'l',
    "stack"=>nil,
    "hidden"=>false,
    "derive"=>"gauge",
    "metric_name"=>metric_name,
    "metric_type"=>"numeric"
  }
  new_datapoint = init_datapoint.merge(datapoint)
  graph['datapoints'] << new_datapoint
  new_datapoint
end

# Add a graph to the monitoring bundle
def mib_add_graph!(title,options={})
  init_graph = {
    'title'=>title,
    'tags'=>[],
    'style'=>'line',
    'composites'=>[],
    'datapoints'=>[],
    'guides'=>[]
  }
  new_graph = init_graph.merge(options)
  new_graph
end

puts "Adding graphs"
title = ([@cu.options[:hostname],'http'] + @cu.options[:subcomponents]).join(' ')
graph = mib_add_graph!(title,{'style'=>'line','tags'=>@cu.options[:tags],'min_left_y'=>0})

checkids.each do |cid|
  dpcid = cid.split('/').last.to_i
  %w{ tt_connect tt_firstbyte duration }.each do |metric|
    mib_add_datapoint!(graph,metric,{'name'=>"#{metric} (ms) broker:#{dpcid}",'legend_formula'=>'=round(VAL,1)','check_id'=>dpcid})
  end
end
#pp graph
r = @cu.circonus.add_graph(graph)
if not r.nil? then
  print "Success\n"
else
  puts "add_graph results: #{r.inspect}"
end

def mib_add_rule_set!(metric_name,rule_set={})
  contactgroupids = []
  @cu.options[:contactgroups].each do |cgname|
    r = @cu.circonus.list_contact_group({'name'=>cgname})
    contactgroupids += r.map { |m| m['_cid'] }
  end
  init_rule_set = {
    'metric_name'       => metric_name,
    'metric_type'       => 'numeric',
    'contact_groups'    => {
      '1'=>contactgroupids,
      '2'=>contactgroupids,
      '3'=>contactgroupids,
      '4'=>contactgroupids,
      '5'=>contactgroupids
    },
    'rules'=>[],
    'derive'=>nil # can be either counter or nil (nil means you want a gauge)
  }
  new_rule_set = init_rule_set.merge(rule_set)
  new_rule_set
end

# Add a rule to the given rule_set
def mib_add_rule!(rule_set,rule={})
  init_rule = {
    'criteria'=>'max value',
    'severity'=>5,
    'value'=>3000,
    'wait'=>5
  }
  new_rule = init_rule.merge(rule)
  rule_set['rules'] << new_rule
  new_rule
end

puts "Adding rule sets"
######## http latency alert #########
checkids.each do |cid|
  rcid = cid.split('/').last.to_i
  rs = mib_add_rule_set!('duration',{'check'=>rcid})
  mib_add_rule!(rs,{ "criteria"=>"on absence", "severity"=>1, "value"=>180 })
  mib_add_rule!(rs,{ "criteria"=>"max value", "severity"=>1, "value"=>(@cu.options[:timeout]*1000) })
  #pp rs
  r = @cu.circonus.add_rule_set(rs)
  if not r.nil? then
    print "Success\n"
  end
  ######## http status code alert #########
  rs = mib_add_rule_set!('code',{'metric_type'=>'text','check'=>rcid})
  mib_add_rule!(rs,{ "criteria"=>"does not contain", "severity"=>1, "value"=>'^[23]\\d\\d$' })
  #pp rs
  r = @cu.circonus.add_rule_set(rs)
  if not r.nil? then
    print "Success\n"
  end
  ##### missing body
  unless @cu.options[:texttomatch].nil?
    rs = mib_add_rule_set!('body_match',{'metric_type'=>'text','check'=>rcid})
    mib_add_rule!(rs,{ "criteria"=>"does not match", "severity"=>1, "value"=>@cu.options[:texttomatch] })
    #pp rs
    r = @cu.circonus.add_rule_set(rs)
    if not r.nil? then
      print "Success\n"
    end
  end
end

